package com.example.root.sqliteproject;import android.content.ContentValues;import android.content.DialogInterface;import android.content.Intent;import android.database.Cursor;import android.net.Uri;import android.support.v7.app.AlertDialog;import android.support.v7.app.AppCompatActivity;import android.os.Bundle;import android.text.TextUtils;import android.view.Menu;import android.view.MenuItem;import android.view.View;import android.widget.Button;import android.widget.EditText;import java.sql.SQLException;import java.text.DateFormat;import java.text.SimpleDateFormat;import java.util.Date;import static com.example.root.sqliteproject.DatabaseContract.CONTENT_URI;import static com.example.root.sqliteproject.DatabaseContract.NoteColumns.DATE;import static com.example.root.sqliteproject.DatabaseContract.NoteColumns.DESCRIPTION;import static com.example.root.sqliteproject.DatabaseContract.NoteColumns.TITLE;public class FormAddUpdateActivity extends AppCompatActivity implements View.OnClickListener{    EditText editTitle, editDesc;    Button btnSubmit;    public static String EXTRA_NOTE     = "extra_note";    public static String EXTRA_POSITION = "extra_position";    public static int REQUEST_UPDATE    = 200;    public static int RESULT_UPDATE     = 201;    public static int RESULT_DELETE     = 202;    public static int REQUEST_ADD       = 100;    public static int RESULT_ADD        = 101;    private boolean isEdit              = false;    private Note note;    private int position;    private NoteHelper noteHelper;    @Override    protected void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        setContentView(R.layout.activity_form_add_update);        editTitle   = (EditText)findViewById(R.id.editTitle);        editDesc    = (EditText)findViewById(R.id.editDesc);        btnSubmit   = (Button)  findViewById(R.id.btnSubmit);        btnSubmit.setOnClickListener(this);        noteHelper  = new NoteHelper(this);        try {            noteHelper.open();        } catch (SQLException e) {            e.printStackTrace();        }        Uri uri = getIntent().getData();        if (uri != null) {            Cursor cursor = getContentResolver().query(uri, null, null, null, null);            if (cursor != null){                if(cursor.moveToFirst()) note = new Note(cursor);                cursor.close();            }        }        String barTitle = null;        String btnTitle = null;        if (isEdit){            barTitle    = "Ubah";            btnTitle    = "Update";            editTitle.setText(note.getTitle());            editDesc.setText(note.getDescription());        } else {            barTitle    = "Tambah";            btnTitle    = "Simpan";        }        getSupportActionBar().setTitle(barTitle);        getSupportActionBar().setDisplayHomeAsUpEnabled(true);        btnSubmit.setText(btnTitle);    }    protected void onDestroy() {        super.onDestroy();        if (noteHelper != null){            noteHelper.close();        }    }    @Override    public void onClick(View v) {        if (v.getId() == R.id.btnSubmit){            String title    = editTitle.getText().toString().trim();            String desc     = editDesc.getText().toString().trim();            boolean isEmpty = false;            if (TextUtils.isEmpty(title)){                isEmpty = true;                editTitle.setError("Field Cannot be Blank");            }            if (!isEmpty){                ContentValues values = new ContentValues();                values.put(TITLE, title);                values.put(DESCRIPTION, desc);                if (isEdit){                    getContentResolver().update(getIntent().getData(), values, null, null);                    setResult(RESULT_UPDATE);                    finish();                } else {                    values.put(DATE,getCurrentDate());                    getContentResolver().insert(CONTENT_URI,values);                    setResult(RESULT_ADD);                    finish();                }            }        }    }    public boolean onCreateOptionsMenu(Menu menu){        if (isEdit){            getMenuInflater().inflate(R.menu.menu_form, menu);        }        return super.onCreateOptionsMenu(menu);    }    public boolean onOptionsItemSelected(MenuItem item){        switch (item.getItemId()){            case R.id.action_delete :                showAlertDialog(ALERT_DIALOG_DELETE);                break;            case android.R.id.home:                showAlertDialog(ALERT_DIALOG_CLOSE);                break;        }        return super.onOptionsItemSelected(item);    }    public void onBackPressed(){        showAlertDialog(ALERT_DIALOG_CLOSE);    }    final int ALERT_DIALOG_DELETE   = 10;    final int ALERT_DIALOG_CLOSE    = 20;    private void showAlertDialog(int type){        final boolean isDialogClose = type == ALERT_DIALOG_CLOSE;        String dialogTitle = null, dialogMessage = null;        if (isDialogClose){            dialogTitle     = "Batal";            dialogMessage   = "Apakah anda yakin membatalkan perubahan pada form ? ";        } else {            dialogTitle     = "Hapus Note";            dialogMessage   = "Apakah anda yakin menghapus Note ? ";        }        AlertDialog.Builder alert = new AlertDialog.Builder(this);        alert.setTitle(dialogTitle);        alert.setMessage(dialogMessage).setCancelable(false).        setPositiveButton("Ya", new DialogInterface.OnClickListener() {            @Override            public void onClick(DialogInterface dialog, int which) {                if (isDialogClose){                    finish();                } else {                    getContentResolver().delete(getIntent().getData(), null, null);                    setResult(RESULT_DELETE, null);                    finish();                }            }        }).setNegativeButton("Tidak", new DialogInterface.OnClickListener() {            @Override            public void onClick(DialogInterface dialog, int which) {                dialog.cancel();            }        });        AlertDialog dialog = alert.create();        dialog.show();    }    private String getCurrentDate(){        DateFormat dateFormat = new SimpleDateFormat("yyyy/MM/dd HH:mm:ss");        Date date = new Date();        return dateFormat.format(date);    }}